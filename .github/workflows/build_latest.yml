name: Build Latest

on: [push,workflow_dispatch]

env:
  DOTNET_SDK_VERSION: "9.0.306"
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  set-date:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.get_date.outputs.date }}
    steps:
      - name: Get Date in UTC+8
        id: get_date
        run: echo "date=$(date -u -d '8 hours' +'%Y%m%d')" >> "$GITHUB_OUTPUT"

  build-win-x64-arm64:
    runs-on: windows-latest
    needs: set-date

    steps:
      - uses: actions/checkout@v1

      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Install zip
        run: choco install zip --no-progress --yes

      - name: Publish [win]
        run: |
          dotnet publish BBDown -r win-x64 -c Release -o artifact
          dotnet publish BBDown -r win-arm64 -c Release -o artifact-arm64

      - name: Package [win]
        run: |
          cd artifact
          zip ../BBDown_${{ needs.set-date.outputs.date }}_win-x64.zip BBDown.exe
          cd ../artifact-arm64
          zip ../BBDown_${{ needs.set-date.outputs.date }}_win-arm64.zip BBDown.exe

      - name: Upload Artifact [win-x64]
        uses: actions/upload-artifact@v4
        with:
          name: BBDown_win-x64
          path: BBDown_${{ needs.set-date.outputs.date }}_win-x64.zip

      - name: Upload Artifact [win-arm64]
        uses: actions/upload-artifact@v4
        with:
          name: BBDown_win-arm64
          path: BBDown_${{ needs.set-date.outputs.date }}_win-arm64.zip

  build-linux-x64-arm64:
    runs-on: ubuntu-latest
    needs: set-date

    steps:
      - uses: actions/checkout@v1
      
      - name: Build x64 in Ubuntu 18.04 container (for glibc 2.27 compatibility)
        run: |
          # 在 Ubuntu 18.04 容器中执行完整构建流程
          docker run --rm \
            -v "$PWD:/workspace" \
            -w /workspace \
            ubuntu:18.04 \
            bash -c "
              set -e
  
              # 安装编译和运行依赖
              apt-get update
              DEBIAN_FRONTEND=noninteractive apt-get install -y wget build-essential clang libicu-dev zlib1g libcurl4-openssl-dev libkrb5-dev
  
              # 下载并安装 .NET SDK
              DOTNET_SDK_VERSION='${{ env.DOTNET_SDK_VERSION }}'
              DOTNET_SDK_URL=\"https://builds.dotnet.microsoft.com/dotnet/Sdk/\${DOTNET_SDK_VERSION}/dotnet-sdk-\${DOTNET_SDK_VERSION}-linux-x64.tar.gz\"
              wget -nv \"\$DOTNET_SDK_URL\" -O dotnet-sdk.tar.gz
              mkdir -p /opt/dotnet
              tar -xzf dotnet-sdk.tar.gz -C /opt/dotnet
              export PATH=\"/opt/dotnet:\$PATH\"
  
              # 编译 Native AOT 输出到挂载的 artifact 目录
              dotnet publish BBDown -r linux-x64 -c Release -o /workspace/artifact
            "
      
      - name: Build arm64 in Ubuntu 18.04 container (for glibc 2.27 compatibility)
        run: |
          # 在 Ubuntu 18.04 容器中执行完整构建流程
          docker run --rm \
            -v "$PWD:/workspace" \
            -w /workspace \
            mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-arm64-20220312201346-b2c2436 \
            bash -c "
              set -e
  
              # 下载并安装 .NET SDK
              DOTNET_SDK_VERSION='${{ env.DOTNET_SDK_VERSION }}'
              DOTNET_SDK_URL=\"https://builds.dotnet.microsoft.com/dotnet/Sdk/\${DOTNET_SDK_VERSION}/dotnet-sdk-\${DOTNET_SDK_VERSION}-linux-x64.tar.gz\"
              wget -nv \"\$DOTNET_SDK_URL\" -O dotnet-sdk.tar.gz
              mkdir -p /opt/dotnet
              tar -xzf dotnet-sdk.tar.gz -C /opt/dotnet
              export PATH=\"/opt/dotnet:\$PATH\"
  
              # 编译 Native AOT 输出到挂载的 artifact 目录
              dotnet publish BBDown -r linux-arm64 -c Release -p:StripSymbols=true -p:CppCompilerAndLinker=clang-9 -p:SysRoot=/crossrootfs/arm64 -o /workspace/artifact-arm64
            "

      - name: Package [linux]
        run: |
          cd artifact
          zip ../BBDown_${{ needs.set-date.outputs.date }}_linux-x64.zip BBDown
          cd ../artifact-arm64
          zip ../BBDown_${{ needs.set-date.outputs.date }}_linux-arm64.zip BBDown

      - name: Upload Artifact [linux-x64]
        uses: actions/upload-artifact@v4
        with:
          name: BBDown_linux-x64
          path: BBDown_${{ needs.set-date.outputs.date }}_linux-x64.zip

      - name: Upload Artifact[linux-arm64]
        uses: actions/upload-artifact@v4
        with:
          name: BBDown_linux-arm64
          path: BBDown_${{ needs.set-date.outputs.date }}_linux-arm64.zip

  build-mac-x64-arm64:
    runs-on: macos-latest
    needs: set-date

    steps:
      - uses: actions/checkout@v1

      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Publish [osx]
        run: |
          dotnet publish BBDown -r osx-x64 -c Release -o artifact
          dotnet publish BBDown -r osx-arm64 -c Release -o artifact-arm64

      - name: Package [osx]
        run: |
          cd artifact
          zip ../BBDown_${{ needs.set-date.outputs.date }}_osx-x64.zip BBDown
          cd ../artifact-arm64
          zip ../BBDown_${{ needs.set-date.outputs.date }}_osx-arm64.zip BBDown

      - name: Upload Artifact [osx-x64]
        uses: actions/upload-artifact@v4
        with:
          name: BBDown_osx-x64
          path: BBDown_${{ needs.set-date.outputs.date }}_osx-x64.zip

      - name: Upload Artifact [osx-arm64]
        uses: actions/upload-artifact@v4
        with:
          name: BBDown_osx-arm64
          path: BBDown_${{ needs.set-date.outputs.date }}_osx-arm64.zip